#!/bin/bash

# üöÄ Scripts Auxiliares para VPS - RX Ve√≠culos

# ==========================================
# SCRIPT DE DEPLOY AUTOM√ÅTICO
# ==========================================
create_deploy_script() {
cat > ~/deploy.sh << 'EOF'
#!/bin/bash
echo "üöÄ Iniciando deploy do RX Ve√≠culos..."

# Navegar para diret√≥rio da aplica√ß√£o
cd /var/www/rx-veiculos

# Fazer backup antes do deploy
echo "üíæ Fazendo backup..."
sudo tar -czf ~/backups/backup_$(date +%Y%m%d_%H%M%S).tar.gz .

# Pull das mudan√ßas
echo "üì• Baixando atualiza√ß√µes..."
git pull origin main

# Verificar se houve mudan√ßas
if [ $? -eq 0 ]; then
    echo "‚úÖ C√≥digo atualizado"
    
    # Instalar depend√™ncias
    echo "üì¶ Instalando depend√™ncias..."
    pnpm install --frozen-lockfile
    
    # Build de produ√ß√£o
    echo "üî® Fazendo build..."
    pnpm run build
    
    # Reiniciar aplica√ß√£o
    echo "üîÑ Reiniciando aplica√ß√£o..."
    pm2 restart rx-veiculos
    
    # Verificar status
    echo "üìä Status final:"
    pm2 status
    
    echo "‚úÖ Deploy conclu√≠do com sucesso!"
else
    echo "‚ùå Erro no git pull"
    exit 1
fi
EOF

chmod +x ~/deploy.sh
echo "‚úÖ Script de deploy criado: ~/deploy.sh"
}

# ==========================================
# SCRIPT DE MONITORAMENTO
# ==========================================
create_monitor_script() {
cat > ~/monitor.sh << 'EOF'
#!/bin/bash
echo "=============================================="
echo "üîç MONITOR RX VE√çCULOS - $(date)"
echo "=============================================="

# Sistema
echo "üíª SISTEMA:"
echo "  CPU: $(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1)%"
echo "  RAM: $(free -m | awk 'NR==2{printf "%.1f%% (%dMB/%dMB)", $3*100/$2, $3, $2}')"
echo "  DISK: $(df -h / | awk 'NR==2{printf "%s (%s livre)", $5, $4}')"
echo "  LOAD: $(uptime | awk -F'load average:' '{print $2}')"

# Rede
echo ""
echo "üåê REDE:"
echo "  HTTP:  $(netstat -an | grep :80 | wc -l) conex√µes"
echo "  HTTPS: $(netstat -an | grep :443 | wc -l) conex√µes"
echo "  SSH:   $(netstat -an | grep :2022 | wc -l) conex√µes"

# Aplica√ß√£o
echo ""
echo "üöÄ APLICA√á√ÉO:"
pm2 status

# Nginx
echo ""
echo "‚ö° NGINX:"
nginx_status=$(systemctl is-active nginx)
echo "  Status: $nginx_status"
if [ "$nginx_status" = "active" ]; then
    echo "  ‚úÖ Nginx funcionando"
else
    echo "  ‚ùå Nginx com problema"
fi

# SSL
echo ""
echo "üîí SSL:"
if [ -f "/etc/letsencrypt/live/*/cert.pem" ]; then
    cert_file=$(find /etc/letsencrypt/live -name "cert.pem" | head -n1)
    exp_date=$(openssl x509 -enddate -noout -in "$cert_file" | cut -d= -f2)
    echo "  Expira em: $exp_date"
else
    echo "  ‚ùå Certificado SSL n√£o encontrado"
fi

# Logs recentes
echo ""
echo "üìù LOGS RECENTES (√∫ltimas 5 linhas):"
tail -n 5 /var/log/nginx/rx-veiculos-error.log 2>/dev/null || echo "  Nenhum erro no Nginx"

echo ""
echo "=============================================="
EOF

chmod +x ~/monitor.sh
echo "‚úÖ Script de monitoramento criado: ~/monitor.sh"
}

# ==========================================
# SCRIPT DE BACKUP
# ==========================================
create_backup_script() {
cat > ~/backup.sh << 'EOF'
#!/bin/bash
echo "üíæ Iniciando backup do RX Ve√≠culos..."

# Diret√≥rios
BACKUP_DIR="$HOME/backups"
APP_DIR="/var/www/rx-veiculos"
DATE=$(date +%Y%m%d_%H%M%S)

# Criar diret√≥rio de backup
mkdir -p "$BACKUP_DIR"

# Backup da aplica√ß√£o
echo "üì¶ Fazendo backup da aplica√ß√£o..."
tar --exclude='node_modules' --exclude='.next/cache' --exclude='.git' \
    -czf "$BACKUP_DIR/app_backup_$DATE.tar.gz" -C /var/www rx-veiculos

# Backup das configura√ß√µes
echo "‚öôÔ∏è  Fazendo backup das configura√ß√µes..."
tar -czf "$BACKUP_DIR/config_backup_$DATE.tar.gz" \
    /etc/nginx/sites-available/rx-veiculos \
    /etc/letsencrypt \
    /etc/ssh/sshd_config \
    /etc/fail2ban/jail.local 2>/dev/null

# Limpeza (manter apenas √∫ltimos 7 backups)
echo "üßπ Limpando backups antigos..."
ls -t "$BACKUP_DIR"/app_backup_*.tar.gz | tail -n +8 | xargs -r rm -f
ls -t "$BACKUP_DIR"/config_backup_*.tar.gz | tail -n +8 | xargs -r rm -f

# Informa√ß√µes do backup
echo "‚úÖ Backup conclu√≠do!"
echo "üìÅ Arquivos criados:"
echo "   - $BACKUP_DIR/app_backup_$DATE.tar.gz"
echo "   - $BACKUP_DIR/config_backup_$DATE.tar.gz"
echo ""
echo "üìä Espa√ßo usado por backups:"
du -sh "$BACKUP_DIR"
echo ""
echo "üìã Backups dispon√≠veis:"
ls -lh "$BACKUP_DIR"/*.tar.gz 2>/dev/null || echo "Nenhum backup encontrado"
EOF

chmod +x ~/backup.sh
echo "‚úÖ Script de backup criado: ~/backup.sh"
}

# ==========================================
# SCRIPT DE HEALTH CHECK
# ==========================================
create_healthcheck_script() {
cat > ~/healthcheck.sh << 'EOF'
#!/bin/bash
# Health Check autom√°tico - RX Ve√≠culos

# Configura√ß√µes
APP_URL="https://seudominio.com"  # SUBSTITUA PELO SEU DOM√çNIO
WEBHOOK_URL=""  # OPCIONAL: URL para notifica√ß√µes

# Fun√ß√£o para log
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a ~/healthcheck.log
}

# Verificar aplica√ß√£o
check_app() {
    local status=$(curl -s -o /dev/null -w "%{http_code}" "$APP_URL" --connect-timeout 10 --max-time 30)
    
    if [ "$status" -eq 200 ]; then
        log "‚úÖ App funcionando - Status: $status"
        return 0
    else
        log "‚ùå App com problema - Status: $status"
        return 1
    fi
}

# Verificar PM2
check_pm2() {
    local pm2_status=$(pm2 jlist | jq -r '.[0].pm2_env.status' 2>/dev/null)
    
    if [ "$pm2_status" = "online" ]; then
        log "‚úÖ PM2 online"
        return 0
    else
        log "‚ùå PM2 offline"
        return 1
    fi
}

# Verificar Nginx
check_nginx() {
    if systemctl is-active --quiet nginx; then
        log "‚úÖ Nginx funcionando"
        return 0
    else
        log "‚ùå Nginx parado"
        return 1
    fi
}

# Reiniciar servi√ßos se necess√°rio
restart_services() {
    log "üîÑ Tentando reiniciar servi√ßos..."
    
    # Reiniciar PM2
    pm2 restart rx-veiculos
    sleep 5
    
    # Reiniciar Nginx se necess√°rio
    if ! check_nginx; then
        sudo systemctl restart nginx
        sleep 3
    fi
    
    # Verificar novamente
    if check_app && check_pm2 && check_nginx; then
        log "‚úÖ Servi√ßos reiniciados com sucesso"
        return 0
    else
        log "‚ùå Falha ao reiniciar servi√ßos"
        return 1
    fi
}

# Enviar notifica√ß√£o (se webhook configurado)
send_notification() {
    if [ -n "$WEBHOOK_URL" ]; then
        curl -X POST -H 'Content-type: application/json' \
             --data "{\"text\":\"üö® RX Ve√≠culos: $1\"}" \
             "$WEBHOOK_URL" &>/dev/null
    fi
}

# Executar verifica√ß√µes
log "üîç Iniciando health check..."

if ! check_app || ! check_pm2 || ! check_nginx; then
    log "‚ö†Ô∏è  Problemas detectados, tentando corre√ß√£o..."
    
    if restart_services; then
        send_notification "Servi√ßos reiniciados automaticamente"
    else
        send_notification "ATEN√á√ÉO: Falha cr√≠tica no sistema!"
        log "üö® ALERTA: Interven√ß√£o manual necess√°ria"
    fi
else
    log "‚úÖ Todos os servi√ßos funcionando normalmente"
fi
EOF

chmod +x ~/healthcheck.sh
echo "‚úÖ Script de health check criado: ~/healthcheck.sh"
}

# ==========================================
# SCRIPT DE LOGS
# ==========================================
create_logs_script() {
cat > ~/logs.sh << 'EOF'
#!/bin/bash
# Visualizador de logs - RX Ve√≠culos

case "$1" in
    "app"|"pm2")
        echo "üì± LOGS DA APLICA√á√ÉO:"
        pm2 logs rx-veiculos --lines 50
        ;;
    "nginx")
        echo "‚ö° LOGS DO NGINX:"
        echo "=== ACCESS LOG ==="
        tail -n 20 /var/log/nginx/rx-veiculos-access.log
        echo ""
        echo "=== ERROR LOG ==="
        tail -n 20 /var/log/nginx/rx-veiculos-error.log
        ;;
    "system"|"auth")
        echo "üîê LOGS DO SISTEMA:"
        tail -n 30 /var/log/auth.log
        ;;
    "fail2ban")
        echo "üõ°Ô∏è  LOGS DO FAIL2BAN:"
        sudo tail -n 20 /var/log/fail2ban.log
        ;;
    "ssl")
        echo "üîí LOGS DO CERTBOT:"
        tail -n 20 /var/log/letsencrypt/letsencrypt.log
        ;;
    *)
        echo "üìã USO: ./logs.sh [TIPO]"
        echo ""
        echo "TIPOS DISPON√çVEIS:"
        echo "  app      - Logs da aplica√ß√£o (PM2)"
        echo "  nginx    - Logs do Nginx"
        echo "  system   - Logs do sistema"
        echo "  fail2ban - Logs de seguran√ßa"
        echo "  ssl      - Logs do SSL"
        echo ""
        echo "EXEMPLO: ./logs.sh app"
        ;;
esac
EOF

chmod +x ~/logs.sh
echo "‚úÖ Script de logs criado: ~/logs.sh"
}

# ==========================================
# CONFIGURAR CRON JOBS
# ==========================================
setup_cron() {
    echo "‚è∞ Configurando tarefas autom√°ticas..."
    
    # Criar arquivo tempor√°rio para crontab
    crontab -l 2>/dev/null > /tmp/crontab.tmp
    
    # Adicionar tarefas (se n√£o existirem)
    grep -q "backup.sh" /tmp/crontab.tmp || echo "0 2 * * * $HOME/backup.sh" >> /tmp/crontab.tmp
    grep -q "healthcheck.sh" /tmp/crontab.tmp || echo "*/5 * * * * $HOME/healthcheck.sh" >> /tmp/crontab.tmp
    grep -q "certbot renew" /tmp/crontab.tmp || echo "0 3 * * 1 certbot renew --quiet" >> /tmp/crontab.tmp
    
    # Aplicar crontab
    crontab /tmp/crontab.tmp
    rm /tmp/crontab.tmp
    
    echo "‚úÖ Tarefas autom√°ticas configuradas:"
    echo "   - Backup di√°rio √†s 2h"
    echo "   - Health check a cada 5 minutos"
    echo "   - Renova√ß√£o SSL semanal"
}

# ==========================================
# FUN√á√ÉO PRINCIPAL
# ==========================================
main() {
    echo "üõ†Ô∏è  Criando scripts auxiliares para VPS..."
    echo ""
    
    create_deploy_script
    create_monitor_script
    create_backup_script
    create_healthcheck_script
    create_logs_script
    setup_cron
    
    echo ""
    echo "‚úÖ SCRIPTS CRIADOS COM SUCESSO!"
    echo ""
    echo "üìã COMANDOS DISPON√çVEIS:"
    echo "   ./deploy.sh      - Deploy autom√°tico"
    echo "   ./monitor.sh     - Monitor do sistema"
    echo "   ./backup.sh      - Backup manual"
    echo "   ./healthcheck.sh - Verifica√ß√£o de sa√∫de"
    echo "   ./logs.sh [tipo] - Visualizar logs"
    echo ""
    echo "üîÑ TAREFAS AUTOM√ÅTICAS ATIVAS:"
    crontab -l
    echo ""
    echo "üéâ Sua VPS est√° totalmente automatizada!"
}

# Executar se chamado diretamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi 